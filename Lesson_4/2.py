"""
2. Написать два алгоритма нахождения i-го по счёту простого числа.
Без использования «Решета Эратосфена»;
Используя алгоритм «Решето Эратосфена»
"""

import math
import timeit


def slow_prime_search(n):
    primes = []

    i = 0
    while len(primes) < n:
        i += 1
        if i < 2:
            continue
        is_prime = True
        for j in range(2, int(math.sqrt(i) + 1)):
            if i % j == 0:
                is_prime = False
                break
        if is_prime:
            primes.append(i)

    return primes


def search_eratosthenes(n, max_value=None):
    if max_value is None:
        max_value = n
    init_arr = [1] * max_value
    init_arr[0], init_arr[1] = 0, 0

    for i in range(2, int(math.sqrt(max_value) + 1)):
        for j in range(2, math.ceil(len(init_arr) / i)):
            init_arr[j * i] = 0

    primes = []
    for idx, el in enumerate(init_arr):
        if len(primes) >= n:
            break
        if el == 1:
            primes.append(idx)

    if len(primes) < n:
        return search_eratosthenes(n, int(max_value * 1.5))

    return primes


def search_eratosthenes_performance(n):
    primes = []

    max_value = n
    init_arr = [1] * max_value
    init_arr[0], init_arr[1] = 0, 0

    shift = 0
    while len(primes) < n:
        for i in range(2, int(math.sqrt(max_value) + 1)):
            start_shift = max(2, shift // i)
            for j in range(start_shift, math.ceil(len(init_arr) / i)):
                init_arr[j * i] = 0

        for idx in range(max(0, shift), len(init_arr)):
            if len(primes) >= n:
                break
            if init_arr[idx] == 1:
                primes.append(idx)

        # extend array
        shift = max_value
        max_value = int(max_value * 1.4)
        init_arr += [1] * (max_value - shift)

    return primes


if __name__ == "__main__":
    print("Реализация собственного алгоритма поиска простого по счету числа: ", end='')
    print(timeit.timeit("slow_prime_search(20000)", setup="from __main__ import slow_prime_search", number=10))
    print("Для 100 простых чисел результат: ", slow_prime_search(100))

    print("\nРеализация поиска простого с помощью решета Эратосфена по счету числа;\n"
          "\tс постоянным увеличением размера инициализированного списка,\n"
          "\tпоскольку решето Эратосфена предполагает работу в конечном диапазоне:\n\t", end='')
    print(timeit.timeit("search_eratosthenes(20000)", setup="from __main__ import search_eratosthenes", number=10))
    print("Для 100 простых чисел результат: ", search_eratosthenes(100))

    print("\nЧем больше диапазон, тем эффективнее второй алгоритм,\n"
          "но уверен, что можно более точно угадывать конечную границу диапазона.")

    print("\nОптимизированная реализация решета Эратосфена с циклом и дополнением массива: ", end='')
    print(timeit.timeit("search_eratosthenes_performance(20000)",
                        setup="from __main__ import search_eratosthenes_performance", number=10))
    print("Для 100 простых чисел результат: ", search_eratosthenes_performance(100))


"""
Реализация собственного алгоритма поиска простого по счету числа: 6.26123281
Для 100 простых чисел результат:  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541]

Реализация поиска простого с помощью решета Эратосфена по счету числа;
        с постоянным увеличением размера инициализированного списка,
        поскольку решето Эратосфена предполагает работу в конечном диапазоне:
        3.709987172999999
Для 100 простых чисел результат:  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541]

Чем больше диапазон, тем эффективнее второй алгоритм,
но уверен, что можно более точно угадывать конечную границу диапазона.

Оптимизированная реализация решета Эратосфена с циклом и дополнением массива: 1.6899806579999996
Для 100 простых чисел результат:  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541]
"""
